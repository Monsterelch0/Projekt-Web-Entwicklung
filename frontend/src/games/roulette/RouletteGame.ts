// src/games/roulette/RouletteGame.ts
import { IBet } from './BettingStrategies';

export type RouletteNumber = {
  value: number;
  color: 'red' | 'black' | 'green';
};

const EUROPEAN_WHEEL: RouletteNumber[] = [
  { value: 0, color: 'green' }, { value: 32, color: 'red' }, { value: 15, color: 'black' },
  { value: 19, color: 'red' }, { value: 4, color: 'black' }, { value: 21, color: 'red' },
  { value: 2, color: 'black' }, { value: 25, color: 'red' }, { value: 17, color: 'black' },
  { value: 34, color: 'red' }, { value: 6, color: 'black' }, { value: 27, color: 'red' },
  { value: 13, color: 'black' }, { value: 36, color: 'red' }, { value: 11, color: 'black' },
  { value: 30, color: 'red' }, { value: 8, color: 'black' }, { value: 23, color: 'red' },
  { value: 10, color: 'black' }, { value: 5, color: 'red' }, { value: 24, color: 'black' },
  { value: 16, color: 'red' }, { value: 33, color: 'black' }, { value: 1, color: 'red' },
  { value: 20, color: 'black' }, { value: 14, color: 'red' }, { value: 31, color: 'black' },
  { value: 9, color: 'red' }, { value: 22, color: 'black' }, { value: 18, color: 'red' },
  { value: 29, color: 'black' }, { value: 7, color: 'red' }, { value: 28, color: 'black' },
  { value: 12, color: 'red' }, { value: 35, color: 'black' }, { value: 3, color: 'red' },
  { value: 26, color: 'black' }
];

export class RouletteGame {
  public balance: number = 1000;
  public currentBets: IBet[] = [];
  public lastResult: RouletteNumber | null = null;
  public message: string = "Select a strategy and place your bets!";
  public minBetAmount: number = 10;

  spinWheel(): void {
    if (this.currentBets.length === 0) {
      this.message = "Please place bets before spinning.";
      return;
    }

    const randomIndex = Math.floor(Math.random() * EUROPEAN_WHEEL.length);
    this.lastResult = EUROPEAN_WHEEL[randomIndex];
    
    let winnings = 0;
    let totalBetAmount = 0;

    this.currentBets.forEach(bet => {
      totalBetAmount += bet.amount;
      if (this.checkWin(bet, this.lastResult!)) {
        winnings += this.calculatePayout(bet);
      }
    });

    // Deduct total bet amount first
    this.balance -= totalBetAmount;
    // Then add winnings
    this.balance += winnings;

    if (winnings > 0) {
      this.message = `Wheel landed on ${this.lastResult.value} (${this.lastResult.color}). You won ${winnings}! Balance: ${this.balance}`;
    } else {
      this.message = `Wheel landed on ${this.lastResult.value} (${this.lastResult.color}). No win this round. Balance: ${this.balance}`;
    }
    this.currentBets = []; // Clear bets after spin
  }

  private checkWin(bet: IBet, result: RouletteNumber): boolean {
    switch (bet.type) {
      case 'color':
        return bet.target === result.color;
      case 'number':
        return bet.target === result.value;
      case 'parity':
        if (result.value === 0) return false; // 0 is not even/odd
        return (bet.target === 'even' && result.value % 2 === 0) ||
               (bet.target === 'odd' && result.value % 2 !== 0);
      // Add more bet types (dozen, column, etc.) here
      default:
        return false;
    }
  }

  private calculatePayout(bet: IBet): number {
    switch (bet.type) {
      case 'color':
      case 'parity':
        return bet.amount * 2; // Pays 1:1
      case 'number':
        return bet.amount * 36; // Pays 35:1
      default:
        return 0;
    }
  }

  placeBets(bets: IBet[]): void {
    let totalBetCost = 0;
    bets.forEach(b => totalBetCost += b.amount);

    if (totalBetCost > this.balance) {
      this.message = "Not enough balance to place these bets.";
      this.currentBets = [];
      return;
    }
    if (bets.length === 0) {
        this.message = "No bets generated by strategy or balance too low for min bet.";
        this.currentBets = [];
        return;
    }
    this.currentBets = bets;
    this.message = `${bets.map(b => b.displayName || `${b.type} on ${b.target} (${b.amount})`).join(', ')} placed. Spin the wheel!`;
  }
}