import { useMemo, useState } from "react";
import { useCredits } from "../lib/useCredits";
import { useNavigate } from "react-router-dom";
import placeholderAvatar from "../assets/placeholder-avatar.jpg";
import { HomeIcon } from "lucide-react";
import { useAccount } from "../lib/useAccount";
import { setAccount } from "../lib/account";

export default function SettingsPage() {
    const [credits, setCredits] = useCredits();
    const [topUpValue, setTopUpValue] = useState<string>('');
    const navigate = useNavigate();
    const account = useAccount();
    const topUpValid = useMemo(() => topUpValue.length > 0 && !isNaN(Number(topUpValue)) && Number(topUpValue) > 0, [topUpValue]);

    return (
        <div>
            <div
                className="settingsButton" style={{ margin: 'auto', marginRight: '0' }}
                onClick={() => navigate('/home')}
            >
                <HomeIcon />
            </div>

            <h1>Settings</h1>
            <br />

            <div style={{ backgroundColor: '#00000055', borderRadius: '16px', padding: '32px 48px', textAlign: 'left' }}>
                <h3>Account</h3>

                {account
                  ? (
                    <>
                        <div style={{ display: 'flex', justifyContent: 'start', alignItems: 'center', gap: '16px' }}>
                            {/* avatar.
                                picvatar.lea.pet is a small service that dynamically generates a static custom avatar
                                from a provided input - in this case the user ID. it functions similarly to github's
                                blocky little autogenerated avatars.
                                see https://picvatar.lea.pet for details on how it works.
                                putting an <img> inside of an <object> makes it fall back to the <img> if the
                                resource the object tag points at fails to load. we use this here to load a static
                                fallback avatar in case the picvatar one fails to load - which does happen sometimes.
                            */}
                            <object
                                data={`https://picvatar.lea.pet/generate/47882/${encodeURIComponent(account.id)}`}
                                type="image/png"
                                style={{ width: '48px', height: '48px', borderRadius: '50%' }}
                            >
                                <img
                                    src={placeholderAvatar}
                                    style={{ width: '48px', height: '48px', borderRadius: '50%' }}
                                    alt="Fallback avatar. It's a cat."
                                />
                            </object>

                            {/* name */}
                            <div style={{ display: 'flex', flexDirection: 'column' }}>
                                <span style={{ fontSize: '18px' }}><b>{account.firstName} {account.lastName}</b></span>
                                <span>{account.email}</span>
                            </div>

                            <button
                                className="settingsPageButton"
                                style={{ backgroundColor: 'rgb(181, 59, 59)', margin: '0 0 0 16px' }}
                                onClick={() => {
                                    setAccount(null);
                                    navigate('/login');
                                }}
                            >
                                Log out
                            </button>
                        </div>

                        <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>
                            <button className="settingsPageButton" onClick={() => alert("todo")}>Set avatar</button>
                            <button className="settingsPageButton" onClick={() => alert("todo")}>Edit account details</button>
                            <button className="settingsPageButton" onClick={() => alert("todo")}>Change Password</button>
                        </div>
                    </>
                  )
                  : (
                    <>
                        <p>You are not logged in.</p>
                        <button className="settingsPageButton" onClick={() => navigate('/login')}>Log in</button>
                    </>
                  )
                }

                <h3>Credits</h3>
                <p>You currently have <b>{credits ?? '-'}</b> credits.</p>

                <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
                    <div style={{ display: 'flex', flexDirection: 'column' }}>
                        <label htmlFor="topUpInput">Amount</label>
                        <input
                            type="number"
                            id="topUpInput"
                            placeholder="1000"
                            min={0}
                            style={{ width: '96px' }}
                            value={topUpValue}
                            onChange={(e) => setTopUpValue(e.currentTarget.value)}
                        />
                    </div>
                    <button
                        className="settingsPageButton"
                        disabled={!topUpValid}
                        onClick={async () => {
                            if (credits == null) return;
                            setTopUpValue('');
                            await setCredits(credits! + Number(topUpValue));
                            alert('Purchase succeeded - Credits bought!');
                        }}
                    >
                        Top up
                    </button>
                    <button
                        className="settingsPageButton"
                        disabled={!topUpValid}
                        onClick={async () => {
                            if (credits == null) return;
                            if (credits - Number(topUpValue) < 0) {
                                alert("You can't withdraw more than you own!");
                                return;
                            }
                            setTopUpValue('');
                            await setCredits(credits! - Number(topUpValue));
                            alert("Withdrawal completed!");
                        }}
                    >
                        Withdraw
                    </button>
                </div>
            </div>
        </div>
    );
}
